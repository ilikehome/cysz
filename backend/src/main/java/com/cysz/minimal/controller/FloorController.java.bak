package com.cysz.minimal.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.web.bind.annotation.*;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

/**
 * 楼层管理控制器 - 基于单元表的楼层信息
 */
@RestController
@RequestMapping("/floor")
@CrossOrigin
public class FloorController {
    
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    /**
     * 分页查询楼层
     */
    @GetMapping("/page")
    public Map<String, Object> getFloorPage(
            @RequestParam(defaultValue = "1") int current,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) Integer buildingId) {
        
        System.out.println("楼层分页查询 - current: " + current + ", size: " + size);
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            StringBuilder sql = new StringBuilder("SELECT f.*, b.building_name FROM floor f LEFT JOIN building b ON f.building_id = b.id WHERE 1=1");
            List<Object> params = new ArrayList<>();
            
            if (keyword != null && !keyword.trim().isEmpty()) {
                sql.append(" AND (f.floor_name LIKE ? OR f.floor_code LIKE ?)");
                params.add("%" + keyword + "%");
                params.add("%" + keyword + "%");
            }
            
            if (buildingId != null) {
                sql.append(" AND f.building_id = ?");
                params.add(buildingId);
            }
            
            // 获取总数
            String countSql = "SELECT COUNT(*) FROM (" + sql.toString() + ") t";
            int total = jdbcTemplate.queryForObject(countSql, params.toArray(), Integer.class);
            
            // 分页查询
            sql.append(" ORDER BY f.id DESC LIMIT ? OFFSET ?");
            params.add(size);
            params.add((current - 1) * size);
            
            List<Map<String, Object>> records = jdbcTemplate.query(sql.toString(), params.toArray(), new RowMapper<Map<String, Object>>() {
                @Override
                public Map<String, Object> mapRow(ResultSet rs, int rowNum) throws SQLException {
                    Map<String, Object> floor = new HashMap<>();
                    floor.put("id", rs.getInt("id"));
                    floor.put("floorName", rs.getString("floor_name"));
                    floor.put("floorCode", rs.getString("floor_code"));
                    floor.put("buildingId", rs.getInt("building_id"));
                    floor.put("buildingName", rs.getString("building_name"));
                    floor.put("remark", rs.getString("remark"));
                    floor.put("status", rs.getInt("status"));
                    floor.put("createTime", rs.getTimestamp("create_time"));
                    return floor;
                }
            });
            
            Map<String, Object> pageResult = new HashMap<>();
            pageResult.put("records", records);
            pageResult.put("total", total);
            pageResult.put("current", current);
            pageResult.put("size", size);
            
            response.put("code", 200);
            response.put("message", "查询成功");
            response.put("data", pageResult);
            
        } catch (Exception e) {
            System.err.println("查询楼层失败: " + e.getMessage());
            response.put("code", 500);
            response.put("message", "查询失败: " + e.getMessage());
            response.put("data", null);
        }
        
        return response;
    }
    
    /**
     * 根据楼栋ID获取楼层列表（用于级联选择）
     */
    @GetMapping("/building/{buildingId}")
    public Map<String, Object> getFloorsByBuilding(@PathVariable Integer buildingId) {
        System.out.println("根据楼栋ID获取楼层列表: " + buildingId);
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            // 从单元表中获取不同的楼层号
            String sql = "SELECT DISTINCT floor_number as id, CONCAT(floor_number, '层') as floorName, CONCAT('F', LPAD(floor_number, 3, '0')) as floorCode " +
                        "FROM unit WHERE building_id = ? AND floor_number IS NOT NULL AND status != 'DELETED' " +
                        "ORDER BY floor_number";
            
            List<Map<String, Object>> floors = jdbcTemplate.query(sql, new Object[]{buildingId}, new RowMapper<Map<String, Object>>() {
                @Override
                public Map<String, Object> mapRow(ResultSet rs, int rowNum) throws SQLException {
                    Map<String, Object> floor = new HashMap<>();
                    floor.put("id", rs.getInt("id"));
                    floor.put("floorName", rs.getString("floorName"));
                    floor.put("floorCode", rs.getString("floorCode"));
                    return floor;
                }
            });
            
            response.put("code", 200);
            response.put("message", "查询成功");
            response.put("data", floors);
            
        } catch (Exception e) {
            System.err.println("获取楼层列表失败: " + e.getMessage());
            response.put("code", 500);
            response.put("message", "查询失败: " + e.getMessage());
            response.put("data", new ArrayList<>());
        }
        
        return response;
    }
    
    /**
     * 创建楼层
     */
    @PostMapping
    public Map<String, Object> createFloor(@RequestBody Map<String, Object> floorData) {
        System.out.println("创建楼层: " + floorData);
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            String sql = "INSERT INTO floor (floor_name, floor_code, building_id, remark, status, create_time) VALUES (?, ?, ?, ?, ?, ?)";
            jdbcTemplate.update(sql, 
                floorData.get("floorName"),
                floorData.get("floorCode"),
                floorData.get("buildingId"),
                floorData.get("remark"),
                floorData.getOrDefault("status", 1),
                LocalDateTime.now()
            );
            
            response.put("code", 200);
            response.put("message", "创建成功");
            
            System.out.println("楼层创建成功");
            
        } catch (Exception e) {
            System.err.println("创建楼层失败: " + e.getMessage());
            response.put("code", 500);
            response.put("message", "创建失败: " + e.getMessage());
            response.put("data", null);
        }
        
        return response;
    }
    
    /**
     * 更新楼层
     */
    @PutMapping("/{id}")
    public Map<String, Object> updateFloor(@PathVariable Integer id, @RequestBody Map<String, Object> floorData) {
        System.out.println("更新楼层 ID: " + id + ", 数据: " + floorData);
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            String sql = "UPDATE floor SET floor_name = ?, floor_code = ?, building_id = ?, remark = ?, status = ? WHERE id = ?";
            jdbcTemplate.update(sql,
                floorData.get("floorName"),
                floorData.get("floorCode"),
                floorData.get("buildingId"),
                floorData.get("remark"),
                floorData.get("status"),
                id
            );
            
            response.put("code", 200);
            response.put("message", "更新成功");
            
        } catch (Exception e) {
            System.err.println("更新楼层失败: " + e.getMessage());
            response.put("code", 500);
            response.put("message", "更新失败: " + e.getMessage());
            response.put("data", null);
        }
        
        return response;
    }
    
    /**
     * 删除楼层
     */
    @DeleteMapping("/{id}")
    public Map<String, Object> deleteFloor(@PathVariable Integer id) {
        System.out.println("删除楼层 ID: " + id);
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            // 检查楼层是否存在单元
            if (hasUnitsInFloor(id)) {
                response.put("code", 400);
                response.put("message", "该楼层下存在单元，无法删除");
                response.put("data", null);
                return response;
            }
            
            String sql = "DELETE FROM floor WHERE id = ?";
            jdbcTemplate.update(sql, id);
            
            response.put("code", 200);
            response.put("message", "删除成功");
            response.put("data", null);
            
        } catch (Exception e) {
            System.err.println("删除楼层失败: " + e.getMessage());
            response.put("code", 500);
            response.put("message", "删除失败: " + e.getMessage());
            response.put("data", null);
        }
        
        return response;
    }
    
    /**
     * 检查楼层下是否有单元
     */
    private boolean hasUnitsInFloor(Integer floorId) {
        try {
            String sql = "SELECT COUNT(*) FROM unit WHERE floor_id = ?";
            Integer count = jdbcTemplate.queryForObject(sql, new Object[]{floorId}, Integer.class);
            return count != null && count > 0;
        } catch (Exception e) {
            return false;
        }
    }
}